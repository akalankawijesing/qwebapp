// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  BUSINESS_OWNER
  ADMIN
}

enum BusinessStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id              String      @id @default(uuid())
  name            String
  email           String?     @unique
  phone           String?     @unique
  password        String?     // Nullable if using OAuth
  role            Role        @default(USER)
  emailVerified   Boolean     @default(false)
  phoneVerified   Boolean     @default(false)
  businesses      Business[]  // Business owners can have multiple businesses
  reviews         Review[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Business {
  id              String      @id @default(uuid())
  name            String
  description     String?
  address         String
  latitude        Float?      // For geolocation
  longitude       Float?
  website         String?
  phone           String
  owner           User        @relation(fields: [ownerId], references: [id])
  ownerId         String
  categories      Category[]  
  status          BusinessStatus @default(PENDING)
  openingHours    Json?       // Stored as JSON: { day: "Monday", open: "09:00", close: "17:00" }
  reviews         Review[]
  deals           Deal[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([name])
  @@index([latitude, longitude]) // For geospatial queries
}

model Category {
  id              String      @id @default(uuid())
  name            String      @unique
  businesses      Business[]
}

model Review {
  id              String      @id @default(uuid())
  rating          Int         
  comment         String?
  photos          String[]    // Array of image URLs (stored in Cloudinary/S3)
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  business        Business    @relation(fields: [businessId], references: [id])
  businessId      String
  flagged         Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([businessId])
  @@index([userId])
}

model Deal {
  id              String      @id @default(uuid())
  title           String
  description     String
  business        Business    @relation(fields: [businessId], references: [id])
  businessId      String
  startDate       DateTime
  endDate         DateTime
  redemptionCode String?      // For tracking redemptions
  createdAt       DateTime    @default(now())
}